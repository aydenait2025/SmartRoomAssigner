# ==========================================
# SmartRoomAssigner Environment Configuration Template
# ==========================================
#
# Copy this file to .env and fill in your actual values.
# NEVER commit the .env file to version control - it contains sensitive information.

# Database Configuration
# Neon PostgreSQL (example - get your own connection string from Neon console)
DATABASE_URL=postgresql://username:password@hostname/database_name?sslmode=require

# Flask Configuration
SECRET_KEY=your-super-secret-key-here-change-in-production-minimum-32-characters
FLASK_ENV=development
FLASK_DEBUG=True

# Email Configuration (Gmail SMTP Example - configure your own)
MAIL_SERVER=smtp.gmail.com
MAIL_PORT=587
MAIL_USE_TLS=True
MAIL_USERNAME=your-email@gmail.com
MAIL_PASSWORD=your-app-password
MAIL_DEFAULT_SENDER=your-email@gmail.com

# OAuth Configuration (Optional - get from respective providers)
GOOGLE_CLIENT_ID=your-google-client-id
GOOGLE_CLIENT_SECRET=your-google-client-secret
MICROSOFT_CLIENT_ID=your-microsoft-client-id
MICROSOFT_CLIENT_SECRET=your-microsoft-client-secret

# Optional: Redis Configuration for Caching
REDIS_URL=redis://localhost:6379/0

# Optional: JWT Configuration
JWT_SECRET_KEY=your-jwt-secret-key-change-in-production

# Application Settings
APP_NAME=SmartRoomAssigner
APP_VERSION=1.0.0
LOG_LEVEL=INFO

# ==========================================
# SETUP INSTRUCTIONS
# ==========================================
#
# 1. Database:
#    - Get PostgreSQL connection string from Neon (or other provider)
#    - Ensure SSL mode is properly configured
#
# 2. Secrets:
#    - Generate strong SECRET_KEY (minimum 32 characters)
#    - Use app-specific passwords for email (not personal password)
#
# 3. Environment:
#    - Set FLASK_ENV=production for production deployments
#    - Configure Redis for caching in high-traffic scenarios
